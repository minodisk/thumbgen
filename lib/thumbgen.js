// Generated by CoffeeScript 1.3.3
(function() {
  var Deferred, captureMovies, colors, copy, copyImages, crop, fs, identify, imagemagick, mkdir, path, readdir, resize, rmdir, run, spawn, util;

  util = require('util');

  fs = require('fs');

  path = require('path');

  spawn = require('child_process').spawn;

  Deferred = require('jsdeferred').Deferred;

  imagemagick = require('imagemagick');

  colors = require('colors');

  rmdir = function(path) {
    var dfd, err, out, rm;
    dfd = new Deferred;
    rm = spawn('rm', ['-rf', path]);
    out = '';
    err = '';
    rm.stdout.on('data', function(data) {
      return out += data.toString('utf8');
    });
    rm.stderr.on('data', function(data) {
      return err += data.toString('utf8');
    });
    rm.on('exit', function(code) {
      if (err !== '') {
        return dfd.fail(err);
      } else {
        return dfd.call(out);
      }
    });
    return dfd;
  };

  mkdir = function(path, mode) {
    var dfd;
    if (mode == null) {
      mode = '0777';
    }
    dfd = new Deferred;
    fs.mkdir(path, mode, function(err) {
      if (err != null) {
        dfd.fail(err);
        return;
      }
      return dfd.call();
    });
    return dfd;
  };

  readdir = function(path) {
    var dfd;
    dfd = new Deferred;
    fs.readdir(path, function(err, files) {
      if (err != null) {
        dfd.fail(err);
        return;
      }
      return dfd.call(files);
    });
    return dfd;
  };

  copy = function(from, to) {
    var dfd;
    dfd = new Deferred;
    util.pump(fs.createReadStream(from), fs.createWriteStream(to), function(err) {
      if (err != null) {
        dfd.fail(err);
        return;
      }
      return dfd.call();
    });
    return dfd;
  };

  identify = function(path) {
    var dfd;
    dfd = new Deferred;
    imagemagick.identify(path, function(err, status) {
      if (err != null) {
        return dfd.fail(err);
      }
      return dfd.call(status);
    });
    return dfd;
  };

  crop = function(opts) {
    var dfd;
    dfd = new Deferred;
    imagemagick.crop(opts, function(err, stdout, stderr) {
      if ((err != null) || stderr !== '') {
        return dfd.fail(err || stderr);
      }
      return dfd.call(stdout);
    });
    return dfd;
  };

  resize = function(opts) {
    var dfd;
    dfd = new Deferred;
    imagemagick.resize(opts, function(err, stdout, stderr) {
      if ((err != null) || stderr !== '') {
        return dfd.fail(err || stderr);
      }
      return dfd.call(stdout);
    });
    return dfd;
  };

  exports.run = run = function(_arg) {
    var format, height, input, mode, output, quality, scaleX, scaleY, tmp, width;
    input = _arg.input, output = _arg.output, width = _arg.width, height = _arg.height, scaleX = _arg.scaleX, scaleY = _arg.scaleY, mode = _arg.mode, format = _arg.format, quality = _arg.quality;
    tmp = path.join(output, '.tmp');
    return Deferred.next(function() {
      return rmdir(tmp);
    }).next(function() {
      return mkdir(tmp);
    }).next(function() {
      return readdir(input);
    }).next(function(files) {
      var file, images, movies, _i, _len;
      images = [];
      movies = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.charAt(0) !== '.') {
          switch (path.extname(file)) {
            case '.png':
            case '.jpg':
            case '.jpeg':
            case '.gif':
              images.push(file);
              break;
            default:
              movies.push(file);
          }
        }
      }
      return Deferred.parallel([copyImages(input, tmp, images), captureMovies(input, tmp, movies)]);
    }).next(function() {
      return readdir(tmp);
    }).next(function(files) {
      var len;
      len = files.length;
      return Deferred.loop(len, function(i) {
        var basename, dstPath, file, srcPath;
        file = files[i];
        basename = path.basename(file, path.extname(file));
        srcPath = path.join(tmp, file);
        dstPath = path.join(output, "" + basename + "." + format);
        return identify(srcPath).next(function(_arg1) {
          var options, srcHeight, srcWidth;
          srcWidth = _arg1.width, srcHeight = _arg1.height;
          if ((scaleX != null) && !(width != null)) {
            width = srcWidth * scaleX;
          }
          if ((scaleY != null) && !(height != null)) {
            height = srcHeight * scaleY;
          }
          if ((width != null) && !(height != null)) {
            height = Math.ceil(width * srcHeight / srcWidth);
          } else if ((height != null) && !(width != null)) {
            width = Math.ceil(height * srcWidth / srcHeight);
          }
          options = {
            srcPath: srcPath,
            dstPath: dstPath,
            format: format,
            quality: quality
          };
          switch (mode) {
            case 'trim':
              options.width = width;
              options.height = height;
              return crop(options);
            case 'min':
              if (srcWidth / srcHeight < width / height) {
                options.width = width;
                options.height = width * srcHeight / srcWidth;
              } else {
                options.width = height * srcWidth / srcHeight;
                options.height = height;
              }
              return resize(options);
            case 'max':
              options.width = width;
              options.height = height;
              return resize(options);
          }
        }).next(function(stdout) {
          return util.puts("[" + 'INFO'.green + "] " + (i + 1) + "/" + len + " " + dstPath);
        }).error(function(err) {
          if (err.stack != null) {
            err = err.stack;
          }
          return util.puts(err.toString().red);
        });
      });
    }).next(function() {
      return rmdir(tmp);
    }).next(function() {
      return util.puts("[" + 'INFO'.green + "] Complete!");
    }).error(function(err) {
      if (err.stack != null) {
        err = err.stack;
      }
      return util.puts(err.toString().red);
    });
  };

  copyImages = function(input, output, files) {
    var dfd;
    dfd = new Deferred;
    Deferred.loop(files.length, function(i) {
      var basename, file;
      file = files[i];
      basename = path.basename(file, path.extname(file));
      return copy(path.join(input, file), path.join(output, "" + basename + ".png"));
    }).next(function() {
      return dfd.call();
    }).error(function(err) {
      return dfd.fail(err);
    });
    return dfd;
  };

  captureMovies = function(input, output, files) {
    var dfd;
    dfd = new Deferred;
    Deferred.loop(files.length, function(i) {
      var basename, err, ffmpeg, file, out,
        _this = this;
      file = files[i];
      dfd = new Deferred;
      basename = path.basename(file, path.extname(file));
      ffmpeg = spawn('ffmpeg', ['-i', path.join(input, file), '-f', 'image2', '-vcodec', 'png', '-ss', '0', '-an', '-deinterlace', path.join(output, "" + basename + ".png")]);
      out = '';
      err = '';
      ffmpeg.stdout.on('data', function(data) {
        return out += data.toString('utf8');
      });
      ffmpeg.stderr.on('data', function(data) {
        return err += data.toString('utf8');
      });
      ffmpeg.on('exit', function(code) {
        if (err !== '') {
          dfd.fail(err);
          return;
        }
        return dfd.call(out);
      });
      return dfd;
    }).next(function() {
      return dfd.call();
    }).error(function(err) {
      return dfd.fail(err);
    });
    return dfd;
  };

}).call(this);
